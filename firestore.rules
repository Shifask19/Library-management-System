
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is the owner of a document (based on a 'userId' field)
    // or if the user is an admin
    function isOwnerOrAdmin(docUserId) {
      return request.auth.uid == docUserId || isAdmin();
    }

    // Users collection
    // - Anyone can create their own user document (e.g., on sign up if you implement that)
    // - Authenticated users can read their own user document
    // - Admins can read/write any user document
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId; // Allow user to create their own profile
      allow update: if request.auth.uid == userId || isAdmin(); // User can update their own, admin can update any
      allow delete: if isAdmin(); // Only admins can delete user documents
    }

    // Books collection
    // - Authenticated users can read all books (e.g., for browsing)
    // - Admins can create, update, and delete any book
    // - Rules for 'donated_pending_approval' status:
    //   - Authenticated user can create a book if status is 'donated_pending_approval' and they are the donor
    //   - Admins can update a 'donated_pending_approval' book (e.g. to approve/reject)
    match /books/{bookId} {
      allow read: if request.auth != null; // Any authenticated user can read book details

      // Create:
      // 1. Admins can create books with any status.
      // 2. Authenticated users can create a book if it's a donation request,
      //    they are the donor, and status is 'donated_pending_approval'.
      allow create: if isAdmin() ||
                       (request.auth != null &&
                        request.resource.data.status == 'donated_pending_approval' &&
                        request.resource.data.donatedBy.userId == request.auth.uid &&
                        request.resource.data.donatedBy.date == request.time.toMillis().toString() // Ensure date is set server-side for consistency
                       );

      // Update:
      // 1. Admins can update any book.
      // 2. For issuing/returning: status, issueDetails can be updated by admin.
      // 3. For donation approval: status can be updated by admin.
      allow update: if isAdmin();
      // More granular update rules could be added here if needed, e.g.,
      // allow update: if isAdmin() || (request.resource.data.status == 'available' && resource.data.status == 'issued' && hasValidIssueDetails());

      allow delete: if isAdmin();
    }

    // Potentially a 'transactions' collection if you implement detailed logging
    // match /transactions/{transactionId} {
    //   allow read: if isAdmin(); // Or if user is part of the transaction
    //   allow create: if isAdmin(); // Or if related to an action like issue/return
    // }
  }
}
