
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Helper function to check if a user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Any authenticated user can create their own user document (e.g., on sign-up)
      allow create: if request.auth != null && request.auth.uid == userId;
      // Only the user themselves or an admin can read/update their own document
      allow read, update: if isOwner(userId) || isAdmin(request.auth.uid);
      // Only an admin can delete user documents (generally not recommended to allow client-side deletion)
      // Consider soft deletes or admin-only server functions for user deletion.
      allow delete: if isAdmin(request.auth.uid);
      // Admins can list all users for management purposes
      allow list: if isAdmin(request.auth.uid);
    }

    // Books collection
    match /books/{bookId} {
      // Any authenticated user can read book details
      allow read: if request.auth != null;
      // Listing books is allowed for authenticated users
      allow list: if request.auth != null;

      // Creating books:
      // - Admins can create any book.
      // - Authenticated users can create a book IF its status is 'donated_pending_approval' (donating a book).
      allow create: if isAdmin(request.auth.uid) ||
                       (request.auth != null && request.resource.data.status == 'donated_pending_approval' &&
                        request.resource.data.donatedBy.userId == request.auth.uid);

      // Updating books:
      // - Admins can update any book.
      // - Non-admins cannot change the status from 'donated_pending_approval' if it was already set.
      // - Non-admins cannot modify 'donatedBy' or 'issueDetails' fields directly.
      allow update: if isAdmin(request.auth.uid) ||
                       // Allow user to update their own donation if still pending and not changing restricted fields
                       (request.auth != null &&
                        resource.data.status == 'donated_pending_approval' &&
                        request.resource.data.status == 'donated_pending_approval' && // status cannot change by user
                        resource.data.donatedBy.userId == request.auth.uid &&
                        !('issueDetails' in request.resource.data) && // User cannot set issueDetails
                        (!('donatedBy' in request.resource.data) || // if donatedBy is being updated, it must be the same user
                          (request.resource.data.donatedBy.userId == resource.data.donatedBy.userId &&
                           request.resource.data.donatedBy.date == resource.data.donatedBy.date &&
                           request.resource.data.donatedBy.userName == resource.data.donatedBy.userName))
                       );


      // Deleting books: Only admins can delete books.
      allow delete: if isAdmin(request.auth.uid);

      // Validation for book data (can be expanded)
      // Example: ensure title and author exist when creating/updating
      // allow write: if request.resource.data.title is string && request.resource.data.title.size() > 0 &&
      //                 request.resource.data.author is string && request.resource.data.author.size() > 0;

      // Ensure `donatedBy` field is properly structured if present
      // allow write: if !('donatedBy' in request.resource.data) ||
      //                 (request.resource.data.donatedBy.userId is string &&
      //                  request.resource.data.donatedBy.userName is string &&
      //                  request.resource.data.donatedBy.date is string);

      // Ensure `issueDetails` field is properly structured if present and only by admin
      // allow write: if !('issueDetails' in request.resource.data) ||
      //                 (isAdmin(request.auth.uid) &&
      //                  request.resource.data.issueDetails.userId is string &&
      //                  request.resource.data.issueDetails.userName is string &&
      //                  request.resource.data.issueDetails.issueDate is string &&
      //                  request.resource.data.issueDetails.dueDate is string);
    }

    // Add rules for other collections as needed (e.g., transactions)
    // match /transactions/{transactionId} {
    //   allow read, write: if isAdmin(request.auth.uid); // Example: only admins can manage transactions
    //   allow create: if request.auth != null; // Or users can create their own transactions
    // }
  }
}

    